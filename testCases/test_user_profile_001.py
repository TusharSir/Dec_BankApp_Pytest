import random
import string
import time

import pytest
from selenium import webdriver

from pageObjects.Login_Page import Login_Class
from pageObjects.SignUp_Page import SignUp_Class
from utilities.Logger_utility import logger_class
from utilities.readConfig_utility import ReadConfig_class


@pytest.mark.usefixtures("setup")
class Test_Login01:
    username = ReadConfig_class.username_data()
    password = ReadConfig_class.password_data()
    base_url = ReadConfig_class.base_url()
    login_url = ReadConfig_class.login_url()
    sign_up_url = ReadConfig_class.signup_url()
    log = logger_class.log_gen_method()



    driver = None
    def test_bankapp_url_001(self):
        self.log.info("Testcase test_bankapp_url_001 is started")
        self.log.info(f"Opening the Bank Application URL-->{self.base_url} ")
        self.driver.get(self.base_url)
        # Initialize the test case
        self.log.info(f"Checking the Bank Application Title-->{self.driver.title}")
        if self.driver.title== "Bank Application":
            print("Test Case Passed: Bank Application URL Opened")
            self.log.info("Taking screenshot")
            self.driver.save_screenshot(".\\Screenshots\\test_bankapp_url_001_pass.png")
            self.log.info("Testcase test_bankapp_url_001 is passed\n")
            assert True
        else:
            self.log.info("Taking screenshot")
            self.driver.save_screenshot(".\\Screenshots\\test_bankapp_url_001_fail.png")
            print("Test Case Failed: Bank Application URL Not Opened")
            self.log.info("Testcase test_bankapp_url_001 is failed\n")
            assert False



    def test_bankapp_login_002(self):
        # Initialize the test case
        self.driver.get(self.login_url)
        # Enter the username and password
        lp = Login_Class(self.driver)
        lp.EnterUserName(self.username)
        lp.EnterPassword(self.password)
        lp.ClickLoginButton()
        time.sleep(3)
        if self.driver.title== "Dashboard":
            print("Test Case Passed: Login Successful")
            self.driver.save_screenshot(".\\Screenshots\\test_bankapp_login_002_pass.png")
            assert True
        else:
            self.driver.save_screenshot(".\\Screenshots\\test_bankapp_login_002_fail.png")
            print("Test Case Failed: Login Failed")
            assert False

    def test_bankapp_signup_003(self, faker):
        self.driver.get(self.sign_up_url)
        sp = SignUp_Class(self.driver)
        username = faker.name()
        print(f"Username: {username}")
        sp.EnterUserName(username)
        sp.EnterPassword("Admin@123")
        phone_number = faker.phone_number()
        print(f"phone_number: {faker.phone_number()}")
        print(f"Number generated by function {generate_random_phone_number()}")
        sp.EnterPhone(phone_number)
        email = faker.email()
        print(f"email: {email}")
        sp.EnterEmail(email)
         # scroll into view
        sp.ClickCreateUserButton()
        time.sleep(2)
        if sp.Verify_SuccessMessage() == "signup_pass":
            print("Test Case Passed: User Created Successfully")
            self.driver.save_screenshot(".\\Screenshots\\test_bankapp_signup_003_pass.png")
            assert True
        else:
            self.driver.save_screenshot(".\\Screenshots\\test_bankapp_signup_003_fail.png")
            print("Test Case Failed: User Not Created Successfully")
            assert False


def generate_random_phone_number():
    return ''.join(random.choices(string.digits, k= 10))




"pytest -v -s --html=Report/my_report.html -n auto --browser chrome"


