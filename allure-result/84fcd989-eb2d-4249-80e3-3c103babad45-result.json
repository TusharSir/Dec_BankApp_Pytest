{"name": "test_bankapp_login_002", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: //input[@id='username']; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nNoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:511:5\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16", "trace": "self = <testCases.test_user_profile_001.Test_Login01 object at 0x000002B632B91EB0>\n\n    def test_bankapp_login_002(self):\n        self.log.info(\"Testcase test_bankapp_login_002 is started\")\n        self.log.info(f\"Opening the Bank Application URL-->{self.login_url} \")\n        # Initialize the test case\n        self.driver.get(self.login_url)\n        # Enter the username and password\n        lp = Login_Class(self.driver)\n        self.log.info(\"Entering the Username\")\n>       lp.EnterUserName(self.username)\n\ntestCases\\test_user_profile_001.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\Login_Page.py:15: in EnterUserName\n    self.driver.find_element(By.XPATH, self.text_username_xpath).send_keys(name)\n..\\..\\CT19\\BankApp_Pytest\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:770: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\CT19\\BankApp_Pytest\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002B632BEBD70>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"Unable to locate element: //input[@id=\\'usern.../content/shared/webdriver/Errors.sys.mjs:511:5\\\\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: //input[@id='username']; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nE       NoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:511:5\nE       dom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n..\\..\\CT19\\BankApp_Pytest\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchElementException"}, "attachments": [{"name": "log", "source": "d4ec269e-ba30-41fe-b053-17303d4406b4-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "12f52de1-5c24-4a5e-9033-83c429880b08-attachment.txt", "type": "text/plain"}], "start": 1733882227719, "stop": 1733882306209, "uuid": "8922340f-fd9d-401d-bba1-6bb9ff8f902b", "historyId": "96cfe49667a6d65537995dc288300f5e", "testCaseId": "96cfe49667a6d65537995dc288300f5e", "fullName": "testCases.test_user_profile_001.Test_Login01#test_bankapp_login_002", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_user_profile_001"}, {"name": "subSuite", "value": "Test_Login01"}, {"name": "host", "value": "Credence-Pc"}, {"name": "thread", "value": "25456-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_user_profile_001"}]}